/* Generated By:JJTree&JavaCC: Do not edit this line. MyPythonGrammar.java */
  package com.python.pv;

import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.WindowConstants;

public class MyPythonGrammar extends JFrame/*@bgen(jjtree)*/implements MyPythonGrammarTreeConstants, MyPythonGrammarConstants {/*@bgen(jjtree)*/
  protected static JJTMyPythonGrammarState jjtree = new JJTMyPythonGrammarState();public MyPythonGrammar() {

        Container c=getContentPane();
                c.setLayout(new BorderLayout());
                setTitle("python2pv");
                JPanel jp=new JPanel();
                JButton jb1=new JButton("\u5bfc\u5165python\u6587\u4ef6");
                JButton jb2=new JButton("\u8f6c\u4e3aPV");
                JButton jb3=new JButton("\u5bfc\u51faPV\u6587\u4ef6");
                JPanel jp1=new JPanel();
            JTextArea ta1=new JTextArea(20,26);
            JTextArea ta2=new JTextArea(20,26);
            jp1.setLayout(new BorderLayout());
            jp.setLayout(new FlowLayout(0));
            ta1.setLineWrap(true);
            ta2.setLineWrap(true);
            ta1.setFont(new Font("\u9ed1\u4f53",Font.BOLD,16));
            ta2.setFont(new Font("\u9ed1\u4f53",Font.BOLD,16));
            JScrollPane jsp=new JScrollPane(ta1);
            JScrollPane jsp1=new JScrollPane(ta2);
            jp1.add(jsp,BorderLayout.WEST);
            jp1.add(jsp1,BorderLayout.EAST);
            jp.add(jb1);
            jp.add(jb2);
            jp.add(jb3);
            c.add(jp1,BorderLayout.CENTER);
            c.add(jp,BorderLayout.NORTH);
            c.show();
            setSize(500,500);
            setVisible(true);
            setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
            jb1.addActionListener(new ActionListener() {

                        @Override
                        public void actionPerformed(ActionEvent e) {
                                // TODO Auto-generated method stub
                                File file=new File("F:\u005c\u005ceclipse\u005c\u005ceclipse\u005c\u005ceclipse-workspace\u005c\u005cPythonProje\u005c\u005csrc\u005c\u005ccom\u005c\u005cpython\u005c\u005cpv\u005c\u005cpython2pv.txt");
                                try {
                                        FileReader fr=new FileReader(file);
                                        BufferedReader bf=new BufferedReader(fr);
                                        char[] c=new char[200];
                                        int len;
                                        while((len=bf.read(c))!=-1) {
                                                String s=new String(c,0,len);
                                                ta1.setText(s);
                                        }
                                        bf.close();
                                } catch (FileNotFoundException e1) {
                                        // TODO Auto-generated catch block
                                        e1.printStackTrace();
                                } catch (IOException e1) {
                                        // TODO Auto-generated catch block
                                        e1.printStackTrace();
                                }
                        }
            });
        jb2.addActionListener(new ActionListener() {

                        @Override
                        public void actionPerformed(ActionEvent e) {
                                // TODO Auto-generated method stub

                                File file=new File("F:\u005c\u005ceclipse\u005c\u005ceclipse\u005c\u005ceclipse-workspace\u005c\u005cPythonProje\u005c\u005csrc\u005c\u005ccom\u005c\u005cpython\u005c\u005cpv\u005c\u005cpython2succ.txt");
                                try {
                                        FileReader fr=new FileReader(file);
                                        BufferedReader br1=new BufferedReader(fr);
                    char[] c=new char[200];
                                        int len;
                                        while((len=br1.read(c))!=-1) {
                                                String s=new String(c,0,len);
                                                ta2.setText(s);
                                        }
                                        br1.close();
                                } catch (FileNotFoundException e1) {
                                        // TODO Auto-generated catch block
                                        e1.printStackTrace();
                                } catch (IOException e1) {
                                        // TODO Auto-generated catch block
                                        e1.printStackTrace();
                                }
                        }
            });
    }
public InputStream openfile() {
        File file=new File("F:\u005c\u005ceclipse\u005c\u005ceclipse\u005c\u005ceclipse-workspace\u005c\u005cPythonProje\u005c\u005csrc\u005c\u005ccom\u005c\u005cpython\u005c\u005cpv\u005c\u005cpython2pv.txt");
                try {
                        FileReader fr=new FileReader(file);
                        BufferedReader bis=new BufferedReader(fr);
                        char[] c=new char[200];
                        int len;
                        while((len=bis.read(c))!=-1) {
                                String str=new String(c,0,len);
                                InputStream incode=new ByteArrayInputStream(str.getBytes());
                                return incode;
                        }
                        fr.close();
                } catch (FileNotFoundException e1) {
                        // TODO Auto-generated catch block
                        e1.printStackTrace();
                } catch (IOException e1) {
                        // TODO Auto-generated catch block
                        e1.printStackTrace();
                }
                return null;
        }           public static void main(String args [])   {
    new MyPythonGrammar(new MyPythonGrammar().openfile());     try     {
     // new MyPythonGrammar(System.in);
       System.out.println("Reading from standard input...");
      System.out.print("Enter an expression like \u005c"python\u005c" :");
       SimpleNode n = MyPythonGrammar.Start();

      StringBuffer s=new StringBuffer("the input is:");
      String str=n.jjtAccept(new MyPythonVisitor(),s).toString();

     File file=new File("F:\u005c\u005ceclipse\u005c\u005ceclipse\u005c\u005ceclipse-workspace\u005c\u005cPythonProje\u005c\u005csrc\u005c\u005ccom\u005c\u005cpython\u005c\u005cpv\u005c\u005cpython2succ.txt");
         FileWriter fw =new FileWriter(file);
         BufferedWriter bw=new BufferedWriter(fw);
       bw.write(str);
       bw.flush();
       bw.close();
      System.out.println(str);
      System.out.println("Thank you.");
      }     catch (Exception e)
       {
          System.out.println("Oops.");
          System.out.println(e.getMessage());
          }
       }

  static final public SimpleNode Start() throws ParseException {
 /*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      HeadPara();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void HeadPara() throws ParseException {
 /*@bgen(jjtree) HeadPara */
  SimpleNode jjtn000 = new SimpleNode(JJTHEADPARA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ident:
        FirstPara();
        break;
      case IF:
        SecondPara();
        break;
      case SERVER:
        ThirdPara();
        break;
      case CLIENT:
        ForthPara();
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void FirstPara() throws ParseException {
 /*@bgen(jjtree) FirstPara */
  SimpleNode jjtn000 = new SimpleNode(JJTFIRSTPARA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Firstassign();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void SecondPara() throws ParseException {
 /*@bgen(jjtree) SecondPara */
  SimpleNode jjtn000 = new SimpleNode(JJTSECONDPARA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      If();
      condition();
      fenhao();
      Firstassign();
      elsestate();
      fenhao();
      Firstassign();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ThirdPara() throws ParseException {
                   /*@bgen(jjtree) ThirdPara */
  SimpleNode jjtn000 = new SimpleNode(JJTTHIRDPARA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      serverimport();
      commastate();
      outband();
      getsockethost();
      commafun();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ForthPara() throws ParseException {
                    /*@bgen(jjtree) ForthPara */
  SimpleNode jjtn000 = new SimpleNode(JJTFORTHPARA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      clientimport();
      commastate();
      commafun();
      commafun();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void commastate() throws ParseException {
                    /*@bgen(jjtree) commastate */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMMASTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      importpackge();
      Identifier();
      getsockethost();
      getsockethost();
      Firstassign();
      socketbind();
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void getsockethost() throws ParseException {
                       /*@bgen(jjtree) getsockethost */
  SimpleNode jjtn000 = new SimpleNode(JJTGETSOCKETHOST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Identifier();
      Equ();
      commafun();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  static final public void commafun() throws ParseException {
                  /*@bgen(jjtree) commafun */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMMAFUN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Identifier();
      pointmethod();
      Identifier();
      socketlp();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ident:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
        Identifier();
      }
      socketrp();
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void socketbind() throws ParseException {
                    /*@bgen(jjtree) socketbind */
  SimpleNode jjtn000 = new SimpleNode(JJTSOCKETBIND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Identifier();
      pointmethod();
      Identifier();
      socketlp();
      socketlp();
      Identifier();
      socketcomma();
      Identifier();
      socketrp();
      socketrp();
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void outband() throws ParseException {
                 /*@bgen(jjtree) outband */
  SimpleNode jjtn000 = new SimpleNode(JJTOUTBAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Identifier();
      pointmethod();
      Identifier();
      socketlp();
      Integer();
      socketrp();
      whiletrue();
      sockettrue();
      Identifier();
      socketcomma();
      Identifier();
      Equ();
      Identifier();
      pointmethod();
      Identifier();
      socketlp();
      socketrp();
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void Firstassign() throws ParseException {
 /*@bgen(jjtree) Firstassign */
  SimpleNode jjtn000 = new SimpleNode(JJTFIRSTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Identifier();
      Equ();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ident:
      case DIGIT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ident:
          Identifier();
          break;
        case DIGIT:
          Integer();
          break;
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void condition() throws ParseException {
 /*@bgen(jjtree) condition */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Identifier();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ:
        case NOTEQ:
        case SMALLEQ:
        case BIGEQ:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_2;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ:
          EQstate();
          break;
        case BIGEQ:
          biger();
          break;
        case SMALLEQ:
          smaller();
          break;
        case NOTEQ:
          noteq();
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      Identifier();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Identifier() throws ParseException {
 /*@bgen(jjtree) Identifier */
SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token token;
    try {
      token = jj_consume_token(ident);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(token.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void pointmethod() throws ParseException {
 /*@bgen(jjtree) pointmethod */
SimpleNode jjtn000 = new SimpleNode(JJTPOINTMETHOD);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token token;
    try {
      token = jj_consume_token(POINT);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(token.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Integer() throws ParseException {
 /*@bgen(jjtree) Integer */
SimpleNode jjtn000 = new SimpleNode(JJTINTEGER);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token token;
    try {
      token = jj_consume_token(DIGIT);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(token.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Equ() throws ParseException {
 /*@bgen(jjtree) Equ */
SimpleNode jjtn000 = new SimpleNode(JJTEQU);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token token;
    try {
      token = jj_consume_token(EQU);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(token.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void EQstate() throws ParseException {
 /*@bgen(jjtree) EQstate */
SimpleNode jjtn000 = new SimpleNode(JJTEQSTATE);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token token;
    try {
      token = jj_consume_token(EQ);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(token.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void biger() throws ParseException {
 /*@bgen(jjtree) biger */
SimpleNode jjtn000 = new SimpleNode(JJTBIGER);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token token;
    try {
      token = jj_consume_token(BIGEQ);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(token.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void smaller() throws ParseException {
 /*@bgen(jjtree) smaller */
SimpleNode jjtn000 = new SimpleNode(JJTSMALLER);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token token;
    try {
      token = jj_consume_token(SMALLEQ);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(token.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void noteq() throws ParseException {
 /*@bgen(jjtree) noteq */
SimpleNode jjtn000 = new SimpleNode(JJTNOTEQ);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token token;
    try {
      token = jj_consume_token(NOTEQ);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(token.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void fenhao() throws ParseException {
 /*@bgen(jjtree) fenhao */
SimpleNode jjtn000 = new SimpleNode(JJTFENHAO);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token token;
    try {
      token = jj_consume_token(FENHAO);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(token.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void elsestate() throws ParseException {
 /*@bgen(jjtree) elsestate */
SimpleNode jjtn000 = new SimpleNode(JJTELSESTATE);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token token;
    try {
      token = jj_consume_token(ELSE);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(token.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void If() throws ParseException {
 /*@bgen(jjtree) If */
SimpleNode jjtn000 = new SimpleNode(JJTIF);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token token;
    try {
      token = jj_consume_token(IF);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(token.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void importpackge() throws ParseException {
 /*@bgen(jjtree) importpackge */
SimpleNode jjtn000 = new SimpleNode(JJTIMPORTPACKGE);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token token;
    try {
      token = jj_consume_token(IMPORT);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(token.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void whiletrue() throws ParseException {
 /*@bgen(jjtree) whiletrue */
SimpleNode jjtn000 = new SimpleNode(JJTWHILETRUE);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token token;
    try {
      token = jj_consume_token(WHILE);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(token.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void sockettrue() throws ParseException {
 /*@bgen(jjtree) sockettrue */
SimpleNode jjtn000 = new SimpleNode(JJTSOCKETTRUE);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token token;
    try {
      token = jj_consume_token(TRUE);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(token.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void socketlp() throws ParseException {
 /*@bgen(jjtree) socketlp */
SimpleNode jjtn000 = new SimpleNode(JJTSOCKETLP);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token token;
    try {
      token = jj_consume_token(LP);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(token.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void socketrp() throws ParseException {
 /*@bgen(jjtree) socketrp */
SimpleNode jjtn000 = new SimpleNode(JJTSOCKETRP);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token token;
    try {
      token = jj_consume_token(RP);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(token.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void socketletter() throws ParseException {
 /*@bgen(jjtree) socketletter */
SimpleNode jjtn000 = new SimpleNode(JJTSOCKETLETTER);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token token;
    try {
      token = jj_consume_token(LETTER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(token.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void socketcomma() throws ParseException {
 /*@bgen(jjtree) socketcomma */
SimpleNode jjtn000 = new SimpleNode(JJTSOCKETCOMMA);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token token;
    try {
      token = jj_consume_token(COMMA);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(token.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void clientimport() throws ParseException {
 /*@bgen(jjtree) clientimport */
SimpleNode jjtn000 = new SimpleNode(JJTCLIENTIMPORT);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token token;
    try {
      token = jj_consume_token(CLIENT);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(token.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void serverimport() throws ParseException {
 /*@bgen(jjtree) serverimport */
SimpleNode jjtn000 = new SimpleNode(JJTSERVERIMPORT);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token token;
    try {
      token = jj_consume_token(SERVER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(token.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MyPythonGrammarTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20000000,0x0,0x0,0x0,0x105800,0x105800,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1c,0x10,0x50,0x50,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public MyPythonGrammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MyPythonGrammar(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MyPythonGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MyPythonGrammar(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MyPythonGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MyPythonGrammar(MyPythonGrammarTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MyPythonGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[39];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 39; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
