/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. MyPythonGrammar.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
 options {                     }
 PARSER_BEGIN(MyPythonGrammar)
  package com.python.pv;

public class MyPythonGrammar extends JFrame/*@bgen(jjtree)*/implements MyPythonGrammarTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTMyPythonGrammarState jjtree = new JJTMyPythonGrammarState();

/*@egen*/
  public MyPythonGrammar() {

	Container c=getContentPane();
		c.setLayout(new BorderLayout());
		setTitle("python2pv");
		JPanel jp=new JPanel();
		JButton jb1=new JButton("\u5bfc\u5165python\u6587\u4ef6");
		JButton jb2=new JButton("\u8f6c\u4e3aPV");
		JButton jb3=new JButton("\u5bfc\u51faPV\u6587\u4ef6");
		JPanel jp1=new JPanel();
	    JTextArea ta1=new JTextArea(20,26);
	    JTextArea ta2=new JTextArea(20,26);
	    jp1.setLayout(new BorderLayout());
	    jp.setLayout(new FlowLayout(0));
	    ta1.setLineWrap(true);
	    ta2.setLineWrap(true); 
	    ta1.setFont(new Font("\u9ed1\u4f53",Font.BOLD,16));
	    ta2.setFont(new Font("\u9ed1\u4f53",Font.BOLD,16));
	    JScrollPane jsp=new JScrollPane(ta1);
	    JScrollPane jsp1=new JScrollPane(ta2);
	    jp1.add(jsp,BorderLayout.WEST);
	    jp1.add(jsp1,BorderLayout.EAST);
	    jp.add(jb1);
	    jp.add(jb2);
	    jp.add(jb3);
	    c.add(jp1,BorderLayout.CENTER);
	    c.add(jp,BorderLayout.NORTH);
	    c.show();		
	    setSize(500,500);
	    setVisible(true);
	    setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
	    jb1.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				File file=new File("F:\\eclipse\\eclipse\\eclipse-workspace\\PythonProje\\src\\com\\python\\pv\\python2pv.txt");
				try {
					FileReader fr=new FileReader(file);
					BufferedReader bf=new BufferedReader(fr);
					char[] c=new char[200];
					int len;
					while((len=bf.read(c))!=-1) {
						String s=new String(c,0,len);
						ta1.setText(s);						
					}
					bf.close();
				} catch (FileNotFoundException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}	    	
	    });
        jb2.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				
				File file=new File("F:\\eclipse\\eclipse\\eclipse-workspace\\PythonProje\\src\\com\\python\\pv\\python2succ.txt");
				try {
					FileReader fr=new FileReader(file);
					BufferedReader br1=new BufferedReader(fr);
                    char[] c=new char[200];
					int len;
					while((len=br1.read(c))!=-1) {
						String s=new String(c,0,len);
						ta2.setText(s);						
					}
					br1.close();
				} catch (FileNotFoundException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}	    	
	    });
    }
public InputStream openfile() {			
	File file=new File("F:\\eclipse\\eclipse\\eclipse-workspace\\PythonProje\\src\\com\\python\\pv\\python2pv.txt");
		try {
			FileReader fr=new FileReader(file);
			BufferedReader bis=new BufferedReader(fr);
			char[] c=new char[200];
			int len;
			while((len=bis.read(c))!=-1) {
				String str=new String(c,0,len);
				InputStream incode=new ByteArrayInputStream(str.getBytes());   
				return incode;						
			}				
			fr.close();	  
		} catch (FileNotFoundException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		return null;
	} 	    public static void main(String args [])   {    
    new MyPythonGrammar(new MyPythonGrammar().openfile());     try     {
     // new MyPythonGrammar(System.in);
       System.out.println("Reading from standard input...");
      System.out.print("Enter an expression like \"python\" :");
       SimpleNode n = MyPythonGrammar.Start();
        
      StringBuffer s=new StringBuffer("the input is:");
      String str=n.jjtAccept(new MyPythonVisitor(),s).toString();

     File file=new File("F:\\eclipse\\eclipse\\eclipse-workspace\\PythonProje\\src\\com\\python\\pv\\python2succ.txt");
  	 FileWriter fw =new FileWriter(file);
  	 BufferedWriter bw=new BufferedWriter(fw);
       bw.write(str);
       bw.flush();
       bw.close(); 
      System.out.println(str);
      System.out.println("Thank you.");
      }     catch (Exception e)
       {
          System.out.println("Oops.");
          System.out.println(e.getMessage());
          }
       }
}
 PARSER_END(MyPythonGrammar)
 SKIP :
 {   " " | "\t" | "\n" | "\r" | < "//" (~[ "\n", "\r" ])*     (       "\n"     | "\r"     | "\r\n"     ) > | < "/*" (~[ "*" ])* "*"     (       ~[ "/" ] (~[ "*" ])* "*"     )*     "/" > } 

TOKEN : /* OPERATORS */
{
  
  < EQU : "=" >
| < SEMICOLON : ";" >
| < LP : "(" >
| < RP : ")" >
| < EQ : "==">
| < NOTEQ : "!=">
| < LT : "< ">
| < SMALLEQ : "<=">
| < NEQ : "<>">
| < OR : "||">
| < AND : "&&">
| < ISTO : "==>">
| < IMPLY : "->">
| < BIGEQ : ">=">
| < POINT:".">
| < YINHAO:"^">
| < COMMA : "," >
| < FENHAO : ":" >
| < LB: "[">
| < RB: "]">
| < OBRACE : "{" >  
| < CBARCE : "}" > 
}
 TOKEN :
{  
  <IF:"if">
| <ELSE:"else">
| <IMPORT:"import">
| <WHILE:"while">
| <TRUE:"true">
| < CLIENT:"Client">
| < SERVER:"Server">
}
 TOKEN : /* IDENTIFIERS */
{
 <ident:  <LETTER> (<LETTER>|<DIGIT>)* >
 |  < LETTER: ["_","a"-"z","A"-"Z"] >
 |  < DIGIT: ["0"-"9"] >
}   SimpleNode Start() :
{/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  HeadPara()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/ 
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void HeadPara() :
{/*@bgen(jjtree) HeadPara */
  SimpleNode jjtn000 = new SimpleNode(JJTHEADPARA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) HeadPara */
  try {
/*@egen*/
  FirstPara()
| SecondPara()
| ThirdPara()
| ForthPara()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void FirstPara() :
{/*@bgen(jjtree) FirstPara */
  SimpleNode jjtn000 = new SimpleNode(JJTFIRSTPARA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FirstPara */
  try {
/*@egen*/

  Firstassign()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 

} void SecondPara() :
{/*@bgen(jjtree) SecondPara */
  SimpleNode jjtn000 = new SimpleNode(JJTSECONDPARA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SecondPara */
  try {
/*@egen*/
  
  If()condition()fenhao()Firstassign()elsestate()fenhao()Firstassign()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 

}

void ThirdPara(): {/*@bgen(jjtree) ThirdPara */
  SimpleNode jjtn000 = new SimpleNode(JJTTHIRDPARA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } {/*@bgen(jjtree) ThirdPara */
  try {
/*@egen*/

  serverimport()commastate()outband()getsockethost()commafun()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/

  }
 void ForthPara(): {/*@bgen(jjtree) ForthPara */
  SimpleNode jjtn000 = new SimpleNode(JJTFORTHPARA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } {/*@bgen(jjtree) ForthPara */
  try {
/*@egen*/
  clientimport()commastate()commafun()commafun()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
   }
void commastate(): {/*@bgen(jjtree) commastate */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMMASTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } {/*@bgen(jjtree) commastate */
try {
/*@egen*/
importpackge()Identifier()getsockethost()getsockethost()
  Firstassign()socketbind()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/

  }
void getsockethost(): {/*@bgen(jjtree) getsockethost */
  SimpleNode jjtn000 = new SimpleNode(JJTGETSOCKETHOST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } {/*@bgen(jjtree) getsockethost */
   try {
/*@egen*/
   Identifier()Equ()commafun()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
  }

void commafun(): {/*@bgen(jjtree) commafun */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMMAFUN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } {/*@bgen(jjtree) commafun */
try {
/*@egen*/

Identifier()pointmethod()Identifier()socketlp()(Identifier())*socketrp()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/

   }
void socketbind(): {/*@bgen(jjtree) socketbind */
  SimpleNode jjtn000 = new SimpleNode(JJTSOCKETBIND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) socketbind */
try {
/*@egen*/

Identifier()pointmethod()Identifier()socketlp()socketlp()Identifier()socketcomma()Identifier()
socketrp()socketrp()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/

  }
void outband(): {/*@bgen(jjtree) outband */
  SimpleNode jjtn000 = new SimpleNode(JJTOUTBAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } {/*@bgen(jjtree) outband */
try {
/*@egen*/

Identifier()pointmethod()Identifier()socketlp()Integer()socketrp() whiletrue()sockettrue()
Identifier()socketcomma()Identifier()Equ()Identifier()pointmethod()Identifier()socketlp()socketrp()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
  }    
 
void Firstassign() :
{/*@bgen(jjtree) Firstassign */
  SimpleNode jjtn000 = new SimpleNode(JJTFIRSTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Firstassign */
  try {
/*@egen*/

  Identifier()Equ()(Identifier()|Integer())?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/

}
void condition() :
{/*@bgen(jjtree) condition */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) condition */
  try {
/*@egen*/
  
  Identifier()(EQstate()|biger()|smaller()|noteq())*Identifier()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/

}

void Identifier() :
{/*@bgen(jjtree) Identifier */
SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token token;
}
{/*@bgen(jjtree) Identifier */
  try {
/*@egen*/
  token=<ident>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(token.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
 void pointmethod() :
{/*@bgen(jjtree) pointmethod */
SimpleNode jjtn000 = new SimpleNode(JJTPOINTMETHOD);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token token;
}
{/*@bgen(jjtree) pointmethod */
  try {
/*@egen*/
  token=<POINT>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(token.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void Integer() :
{/*@bgen(jjtree) Integer */
SimpleNode jjtn000 = new SimpleNode(JJTINTEGER);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token token;
}
{/*@bgen(jjtree) Integer */
  try {
/*@egen*/
  token=<DIGIT>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(token.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Equ() :
{/*@bgen(jjtree) Equ */
SimpleNode jjtn000 = new SimpleNode(JJTEQU);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token token;
}
{/*@bgen(jjtree) Equ */
  try {
/*@egen*/
  token=<EQU>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(token.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void EQstate() :
{/*@bgen(jjtree) EQstate */
SimpleNode jjtn000 = new SimpleNode(JJTEQSTATE);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token token;
}
{/*@bgen(jjtree) EQstate */
  try {
/*@egen*/
  token=<EQ>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(token.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void biger() :
{/*@bgen(jjtree) biger */
SimpleNode jjtn000 = new SimpleNode(JJTBIGER);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token token;
}
{/*@bgen(jjtree) biger */
  try {
/*@egen*/
  token=<BIGEQ>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(token.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void smaller() :
{/*@bgen(jjtree) smaller */
SimpleNode jjtn000 = new SimpleNode(JJTSMALLER);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token token;
}
{/*@bgen(jjtree) smaller */
  try {
/*@egen*/
  token=<SMALLEQ>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(token.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void noteq() :
{/*@bgen(jjtree) noteq */
SimpleNode jjtn000 = new SimpleNode(JJTNOTEQ);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token token;
}
{/*@bgen(jjtree) noteq */
  try {
/*@egen*/
  token=<NOTEQ>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(token.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void fenhao() :
{/*@bgen(jjtree) fenhao */
SimpleNode jjtn000 = new SimpleNode(JJTFENHAO);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token token;
}
{/*@bgen(jjtree) fenhao */
  try {
/*@egen*/
  token=<FENHAO>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(token.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void elsestate() :
{/*@bgen(jjtree) elsestate */
SimpleNode jjtn000 = new SimpleNode(JJTELSESTATE);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token token;
}
{/*@bgen(jjtree) elsestate */
  try {
/*@egen*/
  token=<ELSE>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(token.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void If() :
{/*@bgen(jjtree) If */
SimpleNode jjtn000 = new SimpleNode(JJTIF);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token token;
}
{/*@bgen(jjtree) If */
  try {
/*@egen*/
  token=<IF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(token.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void importpackge() :
{/*@bgen(jjtree) importpackge */
SimpleNode jjtn000 = new SimpleNode(JJTIMPORTPACKGE);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token token;
}
{/*@bgen(jjtree) importpackge */
  try {
/*@egen*/
  token=<IMPORT>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(token.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void whiletrue() :
{/*@bgen(jjtree) whiletrue */
SimpleNode jjtn000 = new SimpleNode(JJTWHILETRUE);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token token;
}
{/*@bgen(jjtree) whiletrue */
  try {
/*@egen*/
  token=<WHILE>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(token.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void sockettrue() :
{/*@bgen(jjtree) sockettrue */
SimpleNode jjtn000 = new SimpleNode(JJTSOCKETTRUE);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token token;
}
{/*@bgen(jjtree) sockettrue */
  try {
/*@egen*/
  token=<TRUE>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(token.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void socketlp() :
{/*@bgen(jjtree) socketlp */
SimpleNode jjtn000 = new SimpleNode(JJTSOCKETLP);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token token;
}
{/*@bgen(jjtree) socketlp */
  try {
/*@egen*/
  token=<LP>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(token.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void socketrp() :
{/*@bgen(jjtree) socketrp */
SimpleNode jjtn000 = new SimpleNode(JJTSOCKETRP);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token token;
}
{/*@bgen(jjtree) socketrp */
  try {
/*@egen*/
  token=<RP>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(token.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void socketletter() :
{/*@bgen(jjtree) socketletter */
SimpleNode jjtn000 = new SimpleNode(JJTSOCKETLETTER);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token token;
}
{/*@bgen(jjtree) socketletter */
  try {
/*@egen*/
  token=<LETTER>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(token.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}  
void socketcomma() :
{/*@bgen(jjtree) socketcomma */
SimpleNode jjtn000 = new SimpleNode(JJTSOCKETCOMMA);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token token;
}
{/*@bgen(jjtree) socketcomma */
  try {
/*@egen*/
  token=<COMMA>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(token.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void clientimport() :
{/*@bgen(jjtree) clientimport */
SimpleNode jjtn000 = new SimpleNode(JJTCLIENTIMPORT);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token token;
}
{/*@bgen(jjtree) clientimport */
  try {
/*@egen*/
  token=<CLIENT>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(token.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void serverimport() :
{/*@bgen(jjtree) serverimport */
SimpleNode jjtn000 = new SimpleNode(JJTSERVERIMPORT);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token token;
}
{/*@bgen(jjtree) serverimport */
  try {
/*@egen*/
  token=<SERVER>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(token.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
