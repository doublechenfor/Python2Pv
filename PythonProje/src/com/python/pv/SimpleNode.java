/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 4.3 */
package com.python.pv;/* JavaCCOptions:MULTI=false,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */


public
class SimpleNode implements Node {

  protected Node parent;
  protected Node[] children;
  protected int id;
  protected Object value;
  protected MyPythonGrammar parser;

  public SimpleNode(int i) {
    id = i;
  }
 // public void deletehttp() {
	  
	  //SimpleNode Tree3=(SimpleNode)Tree2.jjtGetChild(2);
//	  jjtDeleChild(this, 2);
 // }
  public void ModifyGrammer() {
	  
	 // System.out.println("abc");
	  SimpleNode Tree=(SimpleNode)this.jjtGetChild(0);
	  SimpleNode Tree1=(SimpleNode)Tree.jjtGetChild(0);
	  SimpleNode Tree2=(SimpleNode)Tree1.jjtGetChild(0);
	  
	// System.out.println(Tree2.jjtGetValue());
	  if(Tree2.jjtGetNumChildren()==3) {
		  //x=4
		  System.out.println("abc");
        this.assignstate();
	  }
	  if(Tree1.jjtGetNumChildren()==7) {
		  //  if x==y :x=3else : x=5
		  System.out.println("abc");
		  
		  this.ifstatement();
	  }
       if(Tree2.jjtGetValue()=="Server") {		
    	   
    	   modifyServer();
    	   //jjtDeleChild(Tree1, 1);    	   
    	/* SimpleNode Tree3=(SimpleNode)Tree1.jjtGetChild(2);
		  //System.out.println(Tree2.jjtGetNumChildren());
		  SimpleNode Tree4=(SimpleNode)Tree3.jjtGetChild(0);
		  SimpleNode Tree5=(SimpleNode)Tree3.jjtGetChild(1);
		  SimpleNode Tree6=(SimpleNode)Tree3.jjtGetChild(2);
		 // SimpleNode httpmsg=(SimpleNode)Tree3.jjtGetChild(3);
		  SimpleNode Tree7=(SimpleNode)Tree3.jjtGetChild(7);
		 // System.out.println(Tree4.jjtGetNumChildren());
		// System.out.println(Tree5.jjtGetNumChildren());
		 
		 SimpleNode nodeport=(SimpleNode)Tree6.jjtGetChild(2);
		 System.out.println(nodeport.jjtGetValue());
		 SimpleNode httpmsg=(SimpleNode)Tree7.jjtGetChild(6);
		 System.out.println(httpmsg.jjtGetValue());
		 Tree2.jjtSetValue("in");
		 SimpleNode Treelp=(SimpleNode)Tree1.jjtGetChild(1); 
		 Treelp.jjtSetValue("("); 
		  SimpleNode strport=new SimpleNode(9);
		  Tree1.jjtAddChild(strport, 2);
		  strport.jjtSetValue(nodeport.jjtGetValue());
		  SimpleNode strcomma=new SimpleNode(9);
		  Tree1.jjtAddChild(strcomma, 3);
		  strcomma.jjtSetValue(",");
		  SimpleNode strmsg=new SimpleNode(9);
		  Tree1.jjtAddChild(strmsg, 4);
		  strmsg.jjtSetValue(httpmsg.jjtGetValue());
		  SimpleNode strrp=new SimpleNode(9);
		  Tree1.jjtAddChild(strrp, 5);
		  strrp.jjtSetValue(")");*/
	  }
       if(Tree2.jjtGetValue()=="Client") {
    	   
    	  ModifyClient(); 
       }
       
       
  }
  
 public void assignstate() {
	  SimpleNode Tree=(SimpleNode)this.jjtGetChild(0);
	  SimpleNode Tree1=(SimpleNode)Tree.jjtGetChild(0);
	  SimpleNode Tree2=(SimpleNode)Tree1.jjtGetChild(0);
	  SimpleNode Tree3=(SimpleNode)Tree2.jjtGetChild(0);
	//SimpleNode Tree4=(SimpleNode)Tree2.jjtGetChild(2);
	 //System.out.println(Tree2.jjtGetNumChildren());
	  SimpleNode strlet=new SimpleNode(9);
	  Tree3.jjtAddChild(strlet, 0);
	  strlet.jjtSetValue("let");
	  SimpleNode strin=new SimpleNode(10);
	  Tree2.jjtAddChild(strin, 3);
	  strin.jjtSetValue("in"); 
 }
 public void ifstatement() {
	 SimpleNode Tree=(SimpleNode)this.jjtGetChild(0);
	 SimpleNode Tree1=(SimpleNode)Tree.jjtGetChild(0); 
	 SimpleNode Tree3=(SimpleNode)Tree1.jjtGetChild(2); 
	 SimpleNode Tree4=(SimpleNode)Tree1.jjtGetChild(4); 
	 SimpleNode Tree5=(SimpleNode)Tree1.jjtGetChild(5); 
    //SimpleNode Tree7=(SimpleNode)Tree1.jjtGetChild(6);
	// SimpleNode Tree6=(SimpleNode)Tree5.jjtGetChild(0);
	
	 Tree3.jjtSetValue("then\n");
	SimpleNode strspace=new SimpleNode(9);
	Tree4.jjtAddChild(strspace, 0);
	strspace.jjtSetValue("\n");
	Tree5.jjtSetValue("\n");
	//Tree6.jjtAddChild(strspace, 0);
	//SimpleNode Tree3=(SimpleNode)Tree1.jjtGetChild(2); 
 }
 
 public void modifyServer() {
	  SimpleNode Tree=(SimpleNode)this.jjtGetChild(0);
	  SimpleNode Tree1=(SimpleNode)Tree.jjtGetChild(0);
	  SimpleNode Treestate=(SimpleNode)Tree1.jjtGetChild(1);
	  SimpleNode Treethroughport=(SimpleNode)Treestate.jjtGetChild(5);
	  SimpleNode Tree2port=(SimpleNode)Treethroughport.jjtGetChild(7);
	  SimpleNode Treestate1=(SimpleNode)Tree1.jjtGetChild(3);
	  SimpleNode Treestate2=(SimpleNode)Treestate1.jjtGetChild(2);
	  SimpleNode Treerecv=(SimpleNode)Treestate2.jjtGetChild(4);
	  SimpleNode Treein=(SimpleNode)Tree1.jjtGetChild(0);
	  SimpleNode Treelp=(SimpleNode)Tree1.jjtGetChild(1);
	  SimpleNode Treeport=(SimpleNode)Tree1.jjtGetChild(2);
	  SimpleNode Treecomma=(SimpleNode)Tree1.jjtGetChild(3);
	  SimpleNode Treerecv1=(SimpleNode)Treecomma.jjtGetChild(2);
	  SimpleNode Treerecvmsg=(SimpleNode)Treerecv1.jjtGetChild(4);
	 
	  Treein.jjtSetValue("in");
	  System.out.println(Treelp.jjtGetNumChildren());
	  jjtDeleChild(Tree1, 1);
	  jjtDeleChild(Tree1, 1);
	  jjtDeleChild(Tree1, 1);
	  Tree1.jjtDeleChildlast(Tree1, 1);
	  //增加节点
	  SimpleNode strlp=new SimpleNode(19);
	  Tree1.jjtAddChild(strlp, 1);
	  strlp.jjtSetValue("(");
	  SimpleNode strpost=new SimpleNode(15);
	  Tree1.jjtAddChild(strpost, 2);
	  strpost.jjtSetValue(Tree2port.jjtGetValue());
	  SimpleNode strcomma=new SimpleNode(6);
	  Tree1.jjtAddChild(strcomma, 3);
	  strcomma.jjtSetValue(",");
	  SimpleNode strrecvmsg=new SimpleNode(7);
	  Tree1.jjtAddChild(strrecvmsg, 4);
	  strrecvmsg.jjtSetValue(Treerecvmsg.jjtGetValue());
	  SimpleNode strrp=new SimpleNode(8);
	  Tree1.jjtAddChild(strrp, 5);
	  strrp.jjtSetValue(")");
	  //System.out.println(Treerecvmsg.jjtGetValue());
	 // Treeport.jjtSetValue(Tree2port);
	 // Treecomma.jjtSetValue(",");
	 //Treerecvmsg.jjtSetValue(Treerecv);
	  //Tree1.jjtAddChild(strrp, 5);
	  

	 // System.out.println(Treerecv.jjtGetValue());
	  	 
 }
 public  void ModifyClient() {
	 
	  SimpleNode Tree=(SimpleNode)this.jjtGetChild(0);
	  SimpleNode Tree1=(SimpleNode)Tree.jjtGetChild(0);
	  SimpleNode Tree1out=(SimpleNode)Tree1.jjtGetChild(1);
	  SimpleNode Tree1import=(SimpleNode)Tree1.jjtGetChild(0);
	  SimpleNode Tree1send1=(SimpleNode)Tree1.jjtGetChild(2);
	  SimpleNode Tree1send2=(SimpleNode)Tree1send1.jjtGetChild(4);
	  //SimpleNode Tree1send3=(SimpleNode)Tree1send2.jjtGetChild(4);
	  SimpleNode Tree1outpart=(SimpleNode)Tree1out.jjtGetChild(5);
	  SimpleNode Tree1outpartport=(SimpleNode)Tree1outpart.jjtGetChild(7);
	 
	  //System.out.println(Tree1send2.jjtGetValue());
	 jjtDeleChild(Tree1, 1);
	 jjtDeleChild(Tree1, 1);
	 Tree1.jjtDeleChildlast(Tree1, 1);

	  Tree1import.jjtSetValue("out");
	  SimpleNode strlp=new SimpleNode(8);
	  Tree1.jjtAddChild(strlp, 1);
	  strlp.jjtSetValue("(");
	  Tree1import.jjtSetValue("out");
	  SimpleNode strchannel=new SimpleNode(9);
	  Tree1.jjtAddChild(strchannel, 2);
	  strchannel.jjtSetValue(Tree1outpartport.jjtGetValue());
	  SimpleNode strcomma=new SimpleNode(10);
	  Tree1.jjtAddChild(strcomma, 3);
	  strcomma.jjtSetValue(",");
	  SimpleNode strsendmsg=new SimpleNode(13);
	  Tree1.jjtAddChild(strsendmsg, 4);	  
	  strsendmsg.jjtSetValue(Tree1send2.jjtGetValue());
	  SimpleNode strrp=new SimpleNode(14);
	  Tree1.jjtAddChild(strrp, 5);	  
	  strrp.jjtSetValue(")");
	
	  


 }

  public SimpleNode(MyPythonGrammar p, int i) {
    this(i);
    parser = p;
  }

  public void jjtDeleChildtrens(Node[] b) {	  
	 children=b;
  }
  
  public void jjtDeleChildlast(Node n,int i) {
		 if (i <= n.jjtGetNumChildren()) {	
			 if(i==n.jjtGetNumChildren()-1) {
				 Node c[] = new Node[n.jjtGetNumChildren() - 1];
				 System.arraycopy(children, 0, c, 0, children.length-1);
				 children = c;
			 }
		 }
	}
  
public void jjtDeleChild(Node n,int i) {
		 if (i <= n.jjtGetNumChildren()) {	
			 
			 if(i==n.jjtGetNumChildren()-1) {
				 Node c[] = new Node[n.jjtGetNumChildren() - 1];
				 System.arraycopy(children, 0, c, 0, children.length-1);
				// System.out.println("xy");
				 children = c;
			 }
			 else {
		   Node c[] = new Node[n.jjtGetNumChildren() - 1];
		   int p=0;
		   for(int k=0;k<n.jjtGetNumChildren();k++) {			 
			   while(k==i) {
				   k+=1; }	
			   c[p]=n.jjtGetChild(k); p++;    	  
		      } 
		   n.jjtDeleChildtrens(c);
		      } 
		 }
	}
  
  public void jjtOpen() {
  }

  public void jjtClose() {
  }

  public void jjtSetParent(Node n) { parent = n; }
  public Node jjtGetParent() { return parent; }

  public void jjtAddChild(Node n, int i) {
    if (children == null) {
      children = new Node[i + 1];
    } else if (i >= children.length) {
      Node c[] = new Node[i + 1];
      System.arraycopy(children, 0, c, 0, children.length);
      children = c;
    }
    children[i] = n;
  }

  public Node jjtGetChild(int i) {
    return children[i];
  }

  public int jjtGetNumChildren() {
    return (children == null) ? 0 : children.length;
  }

  public void jjtSetValue(Object value) { this.value = value; }
  public Object jjtGetValue() { return value; }

  /** Accept the visitor. **/
  public Object jjtAccept(MyPythonGrammarVisitor visitor, Object data)
{
    return visitor.visit(this, data);
  }

  /** Accept the visitor. **/
  public Object childrenAccept(MyPythonGrammarVisitor visitor, Object data)
{
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        children[i].jjtAccept(visitor, data);
      }
    }
    return data;
  }

  /* You can override these two methods in subclasses of SimpleNode to
     customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(String), otherwise overriding toString() is probably all
     you need to do. */

  public String toString() { return MyPythonGrammarConstants.tokenImage[id]; }
  public String toString(String prefix) { return prefix + toString(); }

  /* Override this method if you want to customize how the node dumps
     out its children. */

  public void dump(String prefix) {
   // System.out.println(toString(prefix));
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        SimpleNode n = (SimpleNode)children[i];
        if (n != null) {
          n.dump(prefix + " ");
        }
      }
    }
  }
}
